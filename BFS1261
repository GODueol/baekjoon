package study;

import java.util.*;

public class BFS1261 {

    public static void main(String args[]) {

        Scanner s = new Scanner(System.in);

        int N = s.nextInt();
        int M = s.nextInt();
        int map[][] = new int[M][N];
        int solve[][] = new int[M][N];
        int result = Integer.MAX_VALUE;

        for (int i = 0; i < M; i++) {
            Arrays.fill(solve[i], Integer.MAX_VALUE);
        }

        s.nextLine();
        for (int i = 0; i < M; i++) {
            String tmp = s.nextLine();
            for (int j = 0; j < N; j++) {
                map[i][j] = tmp.charAt(j) - '0';
            }
        }

        Point start = new Point(0, 0, 0);
        Queue<Point> stack = new LinkedList<>();

        stack.offer(start);

        while (!stack.isEmpty()) {
            Point node = stack.poll();
            int x = node.x;
            int y = node.y;
            int weight = node.weight;

            if (x == M - 1 && y == N - 1) {
                result = Math.min(result, node.weight);
                continue;
            }

            if (solve[x][y] < weight) {
                continue;
            }
            solve[x][y] = weight;

            if (x > 0 && solve[x - 1][y] > weight + map[x - 1][y]) {
                stack.offer(new Point(x - 1, y, weight + map[x - 1][y]));
                solve[x - 1][y] = weight + map[x - 1][y];
            }

            if (y > 0 && solve[x][y - 1] > weight + map[x][y - 1]) {
                stack.offer(new Point(x, y - 1, weight + map[x][y - 1]));
                solve[x][y - 1] = weight + map[x][y - 1];
            }


            if (x < M - 1 && solve[x + 1][y] > weight + map[x + 1][y]) {
                stack.offer(new Point(x + 1, y, weight + map[x + 1][y]));
                solve[x + 1][y] = weight + map[x + 1][y];
            }

            if (y < N - 1 && solve[x][y + 1] > weight + map[x][y + 1]) {
                stack.offer(new Point(x, y + 1, weight + map[x][y + 1]));
                solve[x][y + 1] = weight + map[x][y + 1];
            }
        }

        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(solve[i][j]);
            }
            System.out.println();
        }

        System.out.println(result);

    }
}

class Point {
    int x, y;
    int weight;

    public Point(int x, int y, int weight) {
        this.x = x;
        this.y = y;
        this.weight = weight;
    }
}
