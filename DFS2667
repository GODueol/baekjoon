package stringalgo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class danji {

	public static void main(String args[]) {

		Scanner s = new Scanner(System.in);
		int N = s.nextInt();
		int map[][] = new int[N][N];
		s.nextLine();
		
		for (int i = 0; i < N; i++) {
			String tmp = s.nextLine();
			for (int j = 0; j < tmp.length(); j++) {
				map[i][j] = tmp.charAt(j) - 48;
			}
		}

		Group g = new Group(map);
		g.result();
	}
}

class Group {
	int map[][];
	List<Integer> list = new ArrayList<>();
	int N, group = 0;
	int count = 0;
	boolean visit[][];

	public Group(int map[][]) {
		this.map = map;
		N = map.length;
		visit = new boolean[N][N];

		for (boolean[] m : visit) {
			Arrays.fill(m, false);
		}
	}

	public int result() {

		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				int k = map[i][j];

				if (k == 1 && !visit[i][j]) {
					group++;
					search(i, j);
					list.add(count);
					count = 0;
				} else {
					visit[i][j] = true;
				}
			}
		}
		
		Collections.sort(list);
		System.out.println(group);
		for (int item : list) {
			System.out.println(item);
		}
		return group;
	}

	public void search(int i, int j) {
		visit[i][j] = true;
		count++;
		if (i > 0 && map[i - 1][j] == 1) {
			if (!visit[i - 1][j]) {
				search(i - 1, j);
			}
		}

		if (j > 0 && map[i][j - 1] == 1) {
			if (!visit[i][j - 1]) {
				search(i, j - 1);
			}
		}

		if (i < N - 1 && map[i + 1][j] == 1) {
			if (!visit[i + 1][j]) {
				search(i + 1, j);
			}
		}

		if (j < N - 1 && map[i][j + 1] == 1) {
			if (!visit[i][j + 1]) {
				search(i, j + 1);
			}
		}
	}
}
